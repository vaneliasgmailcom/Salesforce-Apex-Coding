//Generate an Apex class using WSDL2Apex for a SOAP web service, write unit tests that achieve 100% code coverage for the 
//class using a mock response, and run your Apex tests.
//Link: https://trailhead.salesforce.com/content/learn/modules/apex_integration_services/apex_integration_soap_callouts ( darica@darica)

//Class Generated by wsdl2apex

public class ParkService {
    public class byCountryResponse {
        public String[] return_x;
        private String[] return_x_type_info = new String[]{'return','http://parks.services/',null,'0','-1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'return_x'};
    }
    public class byCountry {
        public String arg0;
        private String[] arg0_type_info = new String[]{'arg0','http://parks.services/',null,'0','1','false'};
        private String[] apex_schema_type_info = new String[]{'http://parks.services/','false','false'};
        private String[] field_order_type_info = new String[]{'arg0'};
    }
    public class ParksImplPort {
        public String endpoint_x = 'https://th-apex-soap-service.herokuapp.com/service/parks';
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://parks.services/', 'ParkService'};
        public String[] byCountry(String arg0) {
            ParkService.byCountry request_x = new ParkService.byCountry();
            request_x.arg0 = arg0;
            ParkService.byCountryResponse response_x;
            Map<String, ParkService.byCountryResponse> response_map_x = new Map<String, ParkService.byCountryResponse>();
            response_map_x.put('response_x', response_x);
            WebServiceCallout.invoke(
              this,
              request_x,
              response_map_x,
              new String[]{endpoint_x,
              '',
              'http://parks.services/',
              'byCountry',
              'http://parks.services/',
              'byCountryResponse',
              'ParkService.byCountryResponse'}
            );
            response_x = response_map_x.get('response_x');
            return response_x.return_x;
        }
    }
}

+++++++++++++++++++++++++++++++++++++++

//Class
public class ParkLocator {
    //The method should return an array of available park names for a particular country passed to the 
    //web service (such as Germany, India, Japan, and the United States)
    public static List<String> country(String country){
       ParkService.ParksImplPort prkSvc = new  ParkService.ParksImplPort();
        return prkSvc.byCountry(country);// byCountry is the method of the ParkService class created atumotically by apex
        
    }

}

++++++++++++++++++++++++++++++++++++++++++
//Mock Class
@isTest
global class ParkServiceMock implements WebServiceMock {
    
    global void doInvoke( //doInvoke method will invoke lots of those inputs
        Object stub,
        Object request,
        Map<String, Object> response,
        String endpoint,
        String soapAction,
        String requestName,
        String responseNS,
        String responseName,
        String responseType) {
            
        //start - specify the response you want to send from the parkservice automatic class
        parkService.byCountryResponse response_x = new parkService.byCountryResponse();
            response_x.return_x = new List<String>{'Yosemite', 'Sequoia', 'Crater Lake'};
                response.put('response_x', response_x);
            
            
            
        }
}

+++++++++++++++++++++++++++++++++++++++++
//Test

@isTest
public class ParkLocatorTest {
    
    @isTest static void testCallout(){
        Test.setMock(WebServiceMock.class, new ParkServiceMock());
        String country = 'United States';
        List<String> expectedParks = new List<String>{'Yosemite', 'Sequoia', 'Crater Lake'};
        System.assertEquals(expectedParks, ParkLocator.country(country));// the expected is the list and the Parklocator
        //and country method as actual, and (country) variable that hols the United States as an argument
    }

}
