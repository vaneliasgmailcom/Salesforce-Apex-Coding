//Create an Apex class that calls a REST endpoint to return the name of an animal, write unit tests that achieve 100% code coverage for the 
//class using a mock response, and run your Apex tests.
//Link: https://trailhead.salesforce.com/content/learn/modules/apex_integration_services/apex_integration_rest_callouts (darica@darica)


public class AnimalLocator { // a class that calls a REST endpoint and write a test class 9with mock class)
    
    public static String getAnimalNameById (Integer i){
        //Code that you enter a lot that follow specific format you can't memorize, store in a place to use it when need
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndPoint('https://th-apex-http-callout.herokuapp.com/animals/' +i);
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        
        
        //If the resquest is successful, parse the JSon response
        Map<String, Object> result = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
        Map<String, Object> animal = (Map<String, Object>) result.get('animal');
        System.debug('name: ' + string.valueOf(animal.get('name')));
        return string.valueOf(animal.get('name'));
    }

}

++++++++++++++++++++++++++++++++++++++++++++
//Mock class
@isTest // Mock test must be global and use @isTest anotation
global class AnimalLocatorMock implements HTTPCalloutMock{
    
    global HttpResponse respond(HttpRequest request){
         // Create a fake response
        HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
        response.setBody('{"animal": {"id ":1, "name":"moose","eats":"plants","says":"bellows"}}');
        response.setStatusCode(200);
        return response; 
        
    }

}
+++++++++++++++++++++++++++++++++++++++++++++++
//Test
@isTest //must be private since is a Test class
private class AnimalLocatorTest {
    
    @isTest
    static void animalLocatorTest(){
        Test.setMock(HttpCalloutMock.class, new AnimalLocatorMock()); // set our mock
        String actual = AnimalLocator.getAnimalNameById(1);
        String expected = 'moose';
        System.assertEquals(actual, expected);
        
        
    }
    
    
    
}
